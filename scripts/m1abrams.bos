//linear constant 65536

//#include "constants.h"
#ifndef CONSTANTS_H_
#define CONSTANTS_H_

#define SFXTYPE_VTOL			0
//#define SFXTYPE_THRUST			1
#define	SFXTYPE_WAKE1			2
#define	SFXTYPE_WAKE2			3
#define	SFXTYPE_REVERSEWAKE1	4
#define	SFXTYPE_REVERSEWAKE2	5

//#define SFXTYPE_POINTBASED		256
#define SFXTYPE_WHITESMOKE		256|1
#define SFXTYPE_BLACKSMOKE		256|2
#define SFXTYPE_SUBBUBBLES		256|3

#define SHATTER			1		// The piece will shatter instead of remaining whole
#define EXPLODE_ON_HIT		2		// The piece will explode when it hits the ground
#define FALL			4		// The piece will fall due to gravity instead of just flying off
#define SMOKE			8		// A smoke trail will follow the piece through the air
#define FIRE			16		// A fire trail will follow the piece through the air
#define BITMAPONLY		32		// The piece will not fly off or shatter or anything.  Only a bitmap explosion will be rendered.
#define NOCEGTRAIL		64		// Disables the cegtrail for the specific piece (defined in the unit fbi)
#define BITMAP			10000001

// Bitmap Explosion Types
#define BITMAP1			256
#define BITMAP2			512
#define BITMAP3			1024
#define BITMAP4			2048
#define BITMAP5			4096
#define BITMAPNUKE		8192
#define BITMAPMASK		16128	// Mask of the possible bitmap bits

// Explosion generators
#define UNIT_SFX1				1024
#define UNIT_SFX2				1025
#define UNIT_SFX3				1026
#define UNIT_SFX4				1027
#define UNIT_SFX5				1028
#define UNIT_SFX6				1029
#define UNIT_SFX7				1030
#define UNIT_SFX8				1031

// Weapons
#define FIRE_W1					2048
#define FIRE_W2					2049
#define FIRE_W3					2050
#define FIRE_W4					2051
#define FIRE_W5					2052
#define FIRE_W6					2053
#define FIRE_W7					2054
#define FIRE_W8					2055

#define DETO_W1					4096
#define DETO_W2					4097
#define DETO_W3					4098
#define DETO_W4					4099
#define DETO_W5					4100
#define DETO_W6					4101
#define DETO_W7					4102
#define DETO_W8					4103


// COB constants
#define ACTIVATION           1  // set or get
#define STANDINGMOVEORDERS   2  // set or get
#define STANDINGFIREORDERS   3  // set or get
#define HEALTH               4  // get (0-100%)
#define INBUILDSTANCE        5  // set or get
#define BUSY                 6  // set or get (used by misc. special case missions like transport ships)
#define PIECE_XZ             7  // get
#define PIECE_Y              8  // get
#define UNIT_XZ              9  // get
#define UNIT_Y              10  // get
#define UNIT_HEIGHT         11  // get
#define XZ_ATAN             12  // get atan of packed x,z coords
#define XZ_HYPOT            13  // get hypot of packed x,z coords
#define ATAN                14  // get ordinary two-parameter atan
#define HYPOT               15  // get ordinary two-parameter hypot
#define GROUND_HEIGHT       16  // get land height, 0 if below water
#define BUILD_PERCENT_LEFT  17  // get 0 = unit is built and ready, 1-100 = How much is left to build
#define YARD_OPEN           18  // set or get (change which plots we occupy when building opens and closes)
#define BUGGER_OFF          19  // set or get (ask other units to clear the area)
#define ARMORED             20  // set or get

/*#define WEAPON_AIM_ABORTED  21
#define WEAPON_READY        22
#define WEAPON_LAUNCH_NOW   23
#define FINISHED_DYING      26
#define ORIENTATION         27*/
#define IN_WATER            28
#define CURRENT_SPEED       29
//#define MAGIC_DEATH         31
#define VETERAN_LEVEL       32
#define ON_ROAD             34

#define MAX_ID                    70
#define MY_ID                     71
#define UNIT_TEAM                 72
#define UNIT_BUILD_PERCENT_LEFT   73
#define UNIT_ALLIED               74
#define MAX_SPEED                 75
#define CLOAKED                   76
#define WANT_CLOAK                77
#define GROUND_WATER_HEIGHT       78 // get land height, negative if below water
#define UPRIGHT                   79 // set or get
#define	POW                       80 // get
#define PRINT                     81 // get, so multiple args can be passed
#define HEADING                   82 // get
#define TARGET_ID                 83 // get
#define LAST_ATTACKER_ID          84 // get
#define LOS_RADIUS                85 // set or get
#define AIR_LOS_RADIUS            86 // set or get
#define RADAR_RADIUS              87 // set or get
#define JAMMER_RADIUS             88 // set or get
#define SONAR_RADIUS              89 // set or get
#define SONAR_JAM_RADIUS          90 // set or get
#define SEISMIC_RADIUS            91 // set or get
#define DO_SEISMIC_PING           92 // get
#define CURRENT_FUEL              93 // set or get
#define TRANSPORT_ID              94 // get
#define SHIELD_POWER              95 // set or get
#define STEALTH                   96 // set or get
#define CRASHING                  97 // set or get, returns whether aircraft isCrashing state
#define CHANGE_TARGET             98 // set, the value it's set to determines the affected weapon
#define CEG_DAMAGE                99 // set
#define COB_ID                   100 // get
#define PLAY_SOUND               101 // get, so multiple args can be passed
#define KILL_UNIT                102 // get KILL_UNIT(unitId, SelfDestruct=true, Reclaimed=false)
#define ALPHA_THRESHOLD          103 // set or get
#define SET_WEAPON_UNIT_TARGET   106 // get (fake set)
#define SET_WEAPON_GROUND_TARGET 107 // get (fake set)

// Indices for SET, GET, and GET_UNIT_VALUE for LUA return values
#define LUA0			110	// (LUA0 returns the lua call status, 0 or 1)
#define LUA1			111
#define LUA2			112
#define LUA3			113
#define LUA4			114
#define LUA5			115
#define LUA6			116
#define LUA7			117
#define LUA8			118
#define LUA9			119

#define FLANK_B_MODE             120 // set or get
#define FLANK_B_DIR              121 // set or get, set is through get for multiple args
#define FLANK_B_MOBILITY_ADD     122 // set or get
#define FLANK_B_MAX_DAMAGE       123 // set or get
#define FLANK_B_MIN_DAMAGE       124 // set or get
#define WEAPON_RELOADSTATE       125 // get (with fake set)
#define WEAPON_RELOADTIME        126 // get (with fake set)
#define WEAPON_ACCURACY          127 // get (with fake set)
#define WEAPON_SPRAY             128 // get (with fake set)
#define WEAPON_RANGE             129 // get (with fake set)
#define WEAPON_PROJECTILE_SPEED  130 // get (with fake set)

// NOTE: shared variables use codes [1024 - 5119]

#endif

piece		base, body, turret1, sleeve1, barrel1, firepoint1, turret2, sleeve2, gun2, firepoint2, turret3, sleeve3, gun3, firepoint3, firepoint4, tracks1, tracks2, tracks3;
			

static-var	moving, once, animCount, gun_1_yaw, gun_2_yaw, gun_3_yaw, gun_4_yaw, turret2dead, turret3dead;

// Signal definitions
#define SIG_AIM1				1
#define SIG_AIM2				2
#define SIG_AIM3				16
#define SIG_AIM4				64
#define SIG_ROCK_X				4		//Signal to prevent multiple rocking. REPLACE!
#define SIG_TILT_Z				8		//Signal to prevent multiple rocking. REPLACE!
#define SIG_MOVE				32		//Signal to prevent duplicate moving. Ref for sig number: http://pastebin.com/raw.php?i=qEPRtcD9
#define ANIM_SPEED				50
#define RESTORE_DELAY			15000
#define LARGE_MUZZLE_FLASH_FX	1024
#define HUGE_MUZZLE_FLASH_FX	1025
#define WARMUZZLE				1026
#define flashmuzzle1			1027


//rocking
#define ROCK_PIECE				base	//piece to rock. REPLACE!
#define ROCK_X_SPEED			2		//Number of half-cycles per second around x-axis.
#define ROCK_X_DECAY			-1/3	//Rocking around x-axis is reduced by this factor each time; should be negative to alternate rocking direction.
#define ROCK_X_MIN              <0.1>	//If around x-axis rock is not greater than this amount, rocking will stop after returning to center.

#define ROCK_X_FIRE_1			-24

//tiltz
#define TILT_PIECE				base	//piece to tilt. REPLACE!
#define TILT_Z_ANGLE			<-5>	//How much to tilt at maximum
#define TILT_Z_DIST				[10]	//Typically half the width of the unit. Keeps the unit's edges from sinking into the ground.
#define TILT_Z_SPEED			4		//Number of half-cycles per second around z-axis

#ifndef		CALC_H_
#define		CALC_H_

#define		CALC_H_RADIANS_PER_ANGLE	4/(163 * 256)

static-var	CALC_H_RESULT;
//The results of each calculation are stored in CALC_H_RESULT.
//The result remains valid until one of the following occurs:
//1. A sleep or wait statement. Another calculation may occur while the function is sleeping or waiting.
//2. A function call (or start?). The function may conduct a calculation.
//If more permanent storage is needed you should copy the result to another variable.

Abs(x)
{
	if (x >= 0)
	{
		CALC_H_RESULT = x;
	}
	else
	{
		CALC_H_RESULT = 0 - x;
	}
}

//piece-wise projection on x-axis
ProjXPW(mag, angle) {
	if (angle < <-120>) {
		CALC_H_RESULT = mag * (angle + <180>) / <60>;
	} else if (angle > <120>) {
		CALC_H_RESULT = mag * (<180> - angle) / <60>;
	} else if (angle < <-60>) {
		CALC_H_RESULT = 0 - mag;
	} else if (angle > <60>) {
		CALC_H_RESULT = mag;
	} else {
		CALC_H_RESULT = mag * angle / <60>;
	}
}

//piece-wise projection on z-axis
ProjZPW(mag, angle) {
	if (angle < <-150> || angle > <150>) {
		CALC_H_RESULT = 0 - mag;
	} else if (angle > <30>) {
		CALC_H_RESULT = mag * (<90> - angle) / <60>;
	} else if (angle < <-30>) {
		CALC_H_RESULT = mag * (angle + <90>) / <60>;
	} else {
		CALC_H_RESULT = mag;
	}
}

#endif

//#include "rockx.h"

#ifndef ROCKX_H
#define ROCKX_H

//#include "calc.h"

static-var ROCKX_H_ANGLE;

RockXInit()
{
	ROCKX_H_ANGLE = 0;
}

RockX(heading, rock_x)
{
	signal SIG_ROCK_X;
	set-signal-mask SIG_ROCK_X;
	call-script ProjZPW(<60> / rock_x, heading);
	ROCKX_H_ANGLE = ROCKX_H_ANGLE + CALC_H_RESULT;
	call-script Abs(ROCKX_H_ANGLE);
	while ( CALC_H_RESULT > ROCK_X_MIN )
	{
	    turn ROCK_PIECE to x-axis ROCKX_H_ANGLE speed CALC_H_RESULT * ROCK_X_SPEED;		
		wait-for-turn ROCK_PIECE around x-axis;
		ROCKX_H_ANGLE = ROCKX_H_ANGLE * ROCK_X_DECAY;
		call-script Abs(ROCKX_H_ANGLE);
	}
	turn ROCK_PIECE to x-axis <0> speed ROCK_X_MIN * ROCK_X_SPEED;
}

#endif



//#include "tiltz.h"
#ifndef TILTZ_H
#define TILTZ_H

#include "calc.h"

TiltZ(heading)
{
	var tiltz_angle, tiltz_dist, tilt_z_speed;
	signal SIG_TILT_Z;
	set-signal-mask SIG_TILT_Z;
	call-script ProjXPW(TILT_Z_ANGLE, heading);
	tiltz_angle = CALC_H_RESULT;
	call-script Abs(tiltz_angle * TILT_Z_SPEED);
	tilt_z_speed = CALC_H_RESULT;
	call-script Abs(TILT_Z_DIST * CALC_H_RADIANS_PER_ANGLE * tiltz_angle);
	tiltz_dist = CALC_H_RESULT;
	turn TILT_PIECE to z-axis tiltz_angle speed tilt_z_speed;
	move TILT_PIECE to y-axis tiltz_dist speed tiltz_dist * TILT_Z_SPEED;
	wait-for-turn TILT_PIECE around z-axis;
	wait-for-move TILT_PIECE along y-axis;
	turn TILT_PIECE to z-axis 0 speed tilt_z_speed;
	move TILT_PIECE to y-axis 0 speed tiltz_dist * TILT_Z_SPEED;
}

#endif

RestoreAfterDelay(delay)
{
	sleep delay;
	turn turret1 to y-axis <0> speed <40>;
	turn sleeve1 to x-axis <0> speed <15>;
	//turn turret2 to y-axis <0> speed <90>;
	//turn sleeve2 to x-axis <0> speed <30>;
	//turn turret3 to y-axis <0> speed <90>;
	//turn sleeve3 to x-axis <0> speed <30>;	
}

DamageControl()
{
	var health;
	while (TRUE)
	{
		health = get HEALTH;

		// Damage parts, smoke emits etc.
		if (health < 50)
		{			
			//emit-sfx SFXTYPE_WHITESMOKE from turret2;			
			hide turret2;
			hide sleeve2;
			hide gun2;
			hide firepoint2;
			turret2dead = TRUE;
		}
		else{
			show turret2;
			show sleeve2;
			show gun2;
			show firepoint2;			
			turret2dead = FALSE;
		}
		if (health < 25)
		{			
			//emit-sfx SFXTYPE_BLACKSMOKE from turret3;			
			hide turret3;
			hide sleeve3;
			hide gun3;
			hide firepoint3;
			turret3dead = TRUE;
		}
		else{
			show turret3;
			show sleeve3;
			show gun3;
			show firepoint3;			
			turret3dead = FALSE;
		}

		
		// Restore damaged parts
/*		if (health > 25)
		{
			if (health > 50)
			{
				
			}

		}*/
		
		// Damage parts, mnoke emits etc.
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from body;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from turret1;
			}
		}
		sleep 1000;
	}
}
AnimationControl()
{
	var current_track;
	current_track = 0;
	
	while (TRUE)
	{
		if (moving OR once)
		{
			if (current_track == 0)
			{
				show tracks1;
				hide tracks3;
				++current_track;
			}
			else if (current_track == 1)
				{
				show tracks2;
				hide tracks1;
				++current_track;
			}
			else if (current_track == 2)
			{
				show tracks3;
				hide tracks2;
				current_track=0;
				once = FALSE;
			}
			++animCount;
		}
		sleep ANIM_SPEED;
	}	
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	moving = TRUE;
	animCount = 0;
/*
	spin wheels1 around x-axis speed <360> accelerate <60>;
	spin wheels9 around x-axis speed <360> accelerate <60>;

	spin wheels2 around x-axis speed <480> accelerate <120>;
	spin wheels3 around x-axis speed <480> accelerate <120>;
	spin wheels4 around x-axis speed <480> accelerate <120>;
	spin wheels5 around x-axis speed <480> accelerate <120>;
	
	spin wheels6 around x-axis speed <480> accelerate <120>;
	spin wheels7 around x-axis speed <480> accelerate <120>;
	spin wheels8 around x-axis speed <480> accelerate <120>;
*/
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	moving = FALSE;
	
	// I don't like insta braking. It's not perfect but works for most cases.
	// Probably looks goofy when the unit is turtling around, i.e. does not get faster as time increases..
	once = animCount*ANIM_SPEED/1000;
	if (once > 3) once = 3;
/*
	stop-spin wheels1 around x-axis decelerate <15>;
	stop-spin wheels9 around x-axis decelerate <15>;

	stop-spin wheels2 around x-axis decelerate <45>;
	stop-spin wheels3 around x-axis decelerate <45>;
	stop-spin wheels4 around x-axis decelerate <45>;
	stop-spin wheels5 around x-axis decelerate <45>;
	stop-spin wheels6 around x-axis decelerate <45>;
	stop-spin wheels7 around x-axis decelerate <45>;
	stop-spin wheels8 around x-axis decelerate <45>;
*/
}


// Weapons
AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

QueryWeapon1(piecenum)
{
	piecenum = firepoint1;
}

AimWeapon1 (heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	
	turn turret1 to y-axis (heading) speed <40>;
	turn sleeve1 to x-axis (0 - pitch) speed <45>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay(RESTORE_DELAY);
	gun_1_yaw = heading;
	return TRUE;
}

Shot1(placeholder)
{
	start-script RockX(ROCK_X_FIRE_1, gun_1_yaw);
	start-script TiltZ(gun_1_yaw);
	emit-sfx LARGE_MUZZLE_FLASH_FX from firepoint1;
	move barrel1 to z-axis [-5] now;
	sleep 125;
	move barrel1 to z-axis 0 speed [10];
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;	
}

QueryWeapon2(piecenum)
{
	piecenum = firepoint2;
}

AimWeapon2 (heading, pitch)
{
	if (turret2dead){
		return (FALSE);
	}
	else{
	//signal SIG_AIM2;
	//set-signal-mask SIG_AIM2;

	turn turret2 to y-axis heading speed <360>;
	turn sleeve2 to x-axis 0-pitch speed <180>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;

	//start-script RestoreAfterDelay(RESTORE_DELAY);
	gun_2_yaw = heading;
	return (TRUE);
	}
}


Shot2()
{
	if (turret2dead){
		return (FALSE);
	}
	else{
		emit-sfx WARMUZZLE from firepoint2;
		return (TRUE);
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = turret3;	
}

QueryWeapon3(piecenum)
{
	piecenum = firepoint3;
}

AimWeapon3 (heading, pitch)
{
	if (turret3dead){
		return (FALSE);
	}
	else{
	//signal SIG_AIM3;
	//set-signal-mask SIG_AIM3;
	
	turn turret3 to y-axis (heading) speed <360>;
	turn sleeve3 to x-axis (0 - pitch) speed <180>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	//start-script RestoreAfterDelay(RESTORE_DELAY);
	gun_3_yaw = heading;
	return TRUE;
	}
}

Shot3(placeholder)
{
	if (turret3dead){
		return (FALSE);
	}
	else{
		emit-sfx flashmuzzle1 from firepoint3;
		return (TRUE);
	}
}


AimFromWeapon4(piecenum)
{
	piecenum = firepoint4;	
}

QueryWeapon4(piecenum)
{
	piecenum = firepoint4;
}

AimWeapon4 (heading, pitch)
{
	//signal SIG_AIM4;
	//set-signal-mask SIG_AIM4;

	gun_4_yaw = heading;
	return TRUE;
}

Shot4(placeholder)
{

	return (TRUE);
}


Killed(severity, corpsetype)
{
	if(severity >= 0 AND severity < 25)
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP;
		explode sleeve1 type BITMAPONLY | BITMAP;
		explode gun2 type BITMAPONLY | BITMAP;
		explode turret1 type BITMAPONLY | BITMAP;
		explode turret2 type BITMAPONLY | BITMAP;
		explode turret3 type BITMAPONLY | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 1;
	}
	else if(severity >= 25 AND severity < 50)
	{
		corpsetype = 1;
		explode barrel1 type FALL | BITMAP;
		explode gun2 type SHATTER | BITMAP;
		explode sleeve1 type FALL | BITMAP;
		explode turret1 type SHATTER | BITMAP;
		explode turret2 type FALL | BITMAP;
		explode turret3 type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 1;
	}
	else if(severity >= 50 AND severity < 100)
	{
		corpsetype = 1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret1 type SHATTER | BITMAP;
		explode turret2 type SHATTER | BITMAP;
		explode turret3 type SHATTER | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		return 2;
	}
	// D-Gunned/Self-D
	else if(severity >= 100)
	{
		corpsetype = 2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode body type SHATTER | BITMAP;
		return 2;
	}
}
Create()
{
	moving = FALSE;

	hide tracks1;
	hide tracks2;

	while (get BUILD_PERCENT_LEFT)
		sleep 250;

	start-script AnimationControl();
	start-script DamageControl();
	call-script RockXInit();
}