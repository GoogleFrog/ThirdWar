//linear constant 163840

#define TA			// This is a TA script

#include "constants.h"

piece  	main, turret, outer, inner, sleeve, barrel, flare, breech, smoke,
		tracks1, tracks2, tracks3, tracks4,
		wheels1, wheels2, wheels3, wheels4, wheels5, wheels6, wheels7, wheels8;

static-var  tracks, isMoving, gun_1_yaw, traj;

#define RESTORE_DELAY		3000
#define TRACK_PERIOD			50


// Signal definitions
#define SIG_AIM				2
#define SIG_PUSH_Z			4		//Signal to prevent multiple pushing. REPLACE!
#define SIG_TILT_Z			8
#define SIG_MOVE			16		//Signal to prevent multiple track motion

#define TURRET_SPEED			<35>
#define TURRET_SPEED_2			<70>

#define BARREL_DISTANCE			[-4]
#define BREECH_DISTANCE			[-2]
#define BARREL_SPEED			[1]
#define BREECH_SPEED			[0.5]

#define WHEEL_SPIN_SPEED_L		<360>
#define WHEEL_SPIN_ACCEL_L		<10>
#define WHEEL_SPIN_DECEL_L		<30>
#define WHEEL_SPIN_SPEED_S		<540>
#define WHEEL_SPIN_ACCEL_S		<15>
#define WHEEL_SPIN_DECEL_S		<45>

//tiltz
#define TILT_PIECE				main	//piece to tilt. REPLACE!
#define TILT_Z_ANGLE			<-10>	//How much to tilt at maximum
#define TILT_Z_DIST				[18]		//Typically half the width of the unit. Keeps the unit's edges from sinking into the ground.
#define TILT_Z_SPEED			5		//Number of half-cycles per second around z-axis

//pushz
#define PUSH_PIECE				main	//piece to push. REPLACE!
#define PUSH_Z_DIST				[-4]	
#define PUSH_Z_SPEED			[20]
#define PUSH_Z_RESTORE			[1]

//#include "pushz.h"
PushZ(heading)
{
	signal SIG_PUSH_Z;
	set-signal-mask SIG_PUSH_Z;
	call-script ProjZPW(PUSH_Z_DIST, heading);	
	move PUSH_PIECE to z-axis CALC_H_RESULT speed PUSH_Z_SPEED;
	wait-for-move PUSH_PIECE along z-axis;
	move PUSH_PIECE to z-axis 0 speed PUSH_Z_RESTORE;
}

//#include "tiltz.h"
TiltZ(heading)
{
	var tiltz_angle, tiltz_dist, tilt_z_speed;
	signal SIG_TILT_Z;
	set-signal-mask SIG_TILT_Z;
	call-script ProjXPW(TILT_Z_ANGLE, heading);
	tiltz_angle = CALC_H_RESULT;
	call-script Abs(tiltz_angle * TILT_Z_SPEED);
	tilt_z_speed = CALC_H_RESULT;
	call-script Abs(TILT_Z_DIST * CALC_H_RADIANS_PER_ANGLE * tiltz_angle);
	tiltz_dist = CALC_H_RESULT;
	turn TILT_PIECE to z-axis tiltz_angle speed tilt_z_speed;
	move TILT_PIECE to y-axis tiltz_dist speed tiltz_dist * TILT_Z_SPEED;
	wait-for-turn TILT_PIECE around z-axis;
	wait-for-move TILT_PIECE along y-axis;
	turn TILT_PIECE to z-axis 0 speed tilt_z_speed;
	move TILT_PIECE to y-axis 0 speed tiltz_dist * TILT_Z_SPEED;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from main;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn main to z-axis Func_Var_2 speed <105.016484>;
	turn main to x-axis Func_Var_1 speed <105.016484>;
	wait-for-turn main around z-axis;
	wait-for-turn main around x-axis;
	turn main to z-axis <0.000000> speed <30.005495>;
	turn main to x-axis <0.000000> speed <30.005495>;
}

TrackControl() {
	while (isMoving) {
		++tracks;
		if (tracks == 2) {
			hide tracks1;
			show tracks2;
		} else if (tracks == 3) {
			hide tracks2;
			show tracks3;
		} else if (tracks == 4) {
			hide tracks3;
			show tracks4;
		} else {
			tracks = 1;
			hide tracks4;
			show tracks1;
		}
		sleep TRACK_PERIOD;
	}
}

StartMoving() {
	isMoving = 1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script TrackControl();
	spin wheels1 around x-axis speed WHEEL_SPIN_SPEED_S accelerate WHEEL_SPIN_ACCEL_S;
	spin wheels2 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels3 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels4 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels5 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels6 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels7 around x-axis speed WHEEL_SPIN_SPEED_L accelerate WHEEL_SPIN_ACCEL_L;
	spin wheels8 around x-axis speed WHEEL_SPIN_SPEED_S accelerate WHEEL_SPIN_ACCEL_S;
}

StopMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	isMoving = 0;
	stop-spin wheels1 around x-axis decelerate WHEEL_SPIN_DECEL_S;
	stop-spin wheels2 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels3 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels4 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels5 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels6 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels7 around x-axis decelerate WHEEL_SPIN_DECEL_L;
	stop-spin wheels8 around x-axis decelerate WHEEL_SPIN_DECEL_S;
}

Create()
{
	hide flare;
	hide tracks2;
	hide tracks3;
	hide tracks4;
	isMoving = 0;
	traj = 0;
	tracks = 1;
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed TURRET_SPEED;
	turn outer to x-axis 0 speed TURRET_SPEED;
	turn inner to x-axis 0 speed TURRET_SPEED_2;
	turn sleeve to x-axis 0 speed TURRET_SPEED_2;
}

AimPrimary(heading, pitch)
{
	if (isMoving == 1) return (0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed TURRET_SPEED;
	turn outer to x-axis 0 - pitch speed TURRET_SPEED;
	turn inner to x-axis 2 * pitch speed TURRET_SPEED_2;
	turn sleeve to x-axis 0 - (2 * pitch) speed TURRET_SPEED_2;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	gun_1_yaw = heading;
	return (1);
}

FirePrimary()
{
	start-script TiltZ(gun_1_yaw);
	start-script PushZ(gun_1_yaw);
	show flare;
	hide flare;
	move barrel to z-axis BARREL_DISTANCE now;
	move breech to z-axis BREECH_DISTANCE now;
	move barrel to z-axis 0 speed BARREL_SPEED;
	move breech to z-axis 0 speed BREECH_SPEED;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = main;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode main type BITMAPONLY | BITMAP2;
		explode breech type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return 1;
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel type FALL | BITMAP1;
		explode main type BITMAPONLY | BITMAP2;
		explode breech type FALL | BITMAP3;
		explode sleeve type FALL | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return 1;
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode main type BITMAPONLY | BITMAP2;
		explode breech type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return 1;
	}
	corpsetype = 2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode main type BITMAPONLY | BITMAP2;
	explode breech type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return 2;
}
